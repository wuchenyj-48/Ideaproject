<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>serviceImpl</name>
    <fileDir>${genBaseDir}/${packageName}/${moduleName}<#if subModuleName != "">/${subModuleName}</#if>/service/impl</fileDir>
    <fileName>${className}ServiceImpl.java</fileName>
    <content><![CDATA[
package ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.service.impl;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import fortec.common.core.service.BaseServiceImpl;
import fortec.common.core.utils.StringUtils;

import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.entity.${className};
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.request.${className}QueryRequest;

<#list childTableList as t>
import ${t.packageName}.${t.moduleName}<#if t.subModuleName != "">.${t.subModuleName}</#if>.entity.${t.className};
import ${t.packageName}.${t.moduleName}<#if t.subModuleName != "">.${t.subModuleName}</#if>.request.${t.className}QueryRequest;
</#list>
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.mapper.${className}Mapper;
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.service.${className}Service;
<#list childTableList as t>
import ${t.packageName}.${t.moduleName}<#if t.subModuleName != "">.${t.subModuleName}</#if>.service.${t.className}Service;
</#list>
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.Serializable;
import java.util.List;

/**
* ${table.functionName} service 实现
*
* @author ${table.functionAuthor}
* @version 1.0
*/
@Slf4j
@AllArgsConstructor
@Service
public class ${className}ServiceImpl extends BaseServiceImpl<${className}Mapper, ${className}> implements ${className}Service {

    <#list childTableList as t>
    private final ${t.className}Service ${t.className?uncap_first}Service;
    </#list>

    @Override
    public boolean removeCascadeById(Serializable id) {
        <#list childTableList as t>
        ${t.className?uncap_first}Service.remove(Wrappers.<${t.className}>query().eq("${t.parentTableFkName}", id));
        </#list>
        return super.removeById(id);
    }

    @Override
    public List<${className}> list(${className}QueryRequest request) {
        List<${className}> list = this.list(Wrappers.<${className}>query()
            <#list table.columns as c>
                <#if c.isQuery?? && c.isQuery == 1 && c.queryType??>
                    <#if c.attrType == 'String'>
                        <#switch c.queryType>
                            <#case "=">
                .eq(StringUtils.isNotBlank(request.get${c.attrName?cap_first}()), "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "like">
                .like(StringUtils.isNotBlank(request.get${c.attrName?cap_first}()), "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "between">
                .between(StringUtils.isNotBlank(request.getBegin${c.attrName?cap_first}()) && StringUtils.isNotBlank(request.getEnd${c.attrName?cap_first}()), "${c.columnName}", request.getBegin${c.attrName?cap_first}(), request.getEnd${c.attrName?cap_first}())
                                <#break>
                            <#default>
                        </#switch>
                    <#else>
                        <#switch c.queryType>
                            <#case "=">
                .eq(request.get${c.attrName?cap_first}() != null, "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "like">
                .like(request.get${c.attrName?cap_first}() != null, "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "between">
                .between(request.getBegin${c.attrName?cap_first}() != null && request.getEnd${c.attrName?cap_first}() != null, "${c.columnName}", request.getBegin${c.attrName?cap_first}(), request.getEnd${c.attrName?cap_first}())
                                <#break>
                            <#default>
                        </#switch>
                    </#if>
                </#if>
            </#list>
            .orderByDesc("gmt_modified")
        );
        return list;
    }

    @Override
    public IPage<${className}> page(${className}QueryRequest request) {
        IPage page = this.page(request.getPage(), Wrappers.<${className}>query()
             <#list table.columns as c>
                <#if c.isQuery?? && c.isQuery == 1 && c.queryType??>
                    <#if c.attrType == 'String'>
                        <#switch c.queryType>
                            <#case "=">
                .eq(StringUtils.isNotBlank(request.get${c.attrName?cap_first}()), "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "like">
                .like(StringUtils.isNotBlank(request.get${c.attrName?cap_first}()), "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "between">
                .between(StringUtils.isNotBlank(request.getBegin${c.attrName?cap_first}()) && StringUtils.isNotBlank(request.getEnd${c.attrName?cap_first}()), "${c.columnName}", request.getBegin${c.attrName?cap_first}(), request.getEnd${c.attrName?cap_first}())
                                <#break>
                            <#default>
                        </#switch>
                    <#else>
                        <#switch c.queryType>
                            <#case "=">
                .eq(request.get${c.attrName?cap_first}() != null, "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "like">
                .like(request.get${c.attrName?cap_first}() != null, "${c.columnName}", request.get${c.attrName?cap_first}())
                                <#break>
                            <#case "between">
                .between(request.getBegin${c.attrName?cap_first}() != null && request.getEnd${c.attrName?cap_first}() != null, "${c.columnName}", request.getBegin${c.attrName?cap_first}(), request.getEnd${c.attrName?cap_first}())
                                <#break>
                            <#default>
                        </#switch>
                    </#if>
                </#if>
            </#list>
            .orderByDesc("gmt_modified")
        );
        return page;
    }

}]]>
    </content>
</template>


